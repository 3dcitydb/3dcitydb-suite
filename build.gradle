import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'application'
    id 'distribution'
}

configurations {
    izpack
}

dependencies {
    izpack fileTree(dir: 'resources/izpack/lib', include: '*.jar')
}

version '4.3.0'

task build3DCityDB(type: GradleBuild, group: build) {
    def cityDBProject = project(':citydb')
    tasks = ['installDist']
    buildFile = "$cityDBProject.projectDir/build.gradle"
    outputs.dir "$cityDBProject.projectDir/build/install/3dcitydb"
}

task build3DCityDBDocs(type: GradleBuild, group: build) {
    def cityDBDocsProject = project(':docs')
    tasks = ['build']
    buildFile = "$cityDBDocsProject.projectDir/build.gradle"
    outputs.dir "$cityDBDocsProject.projectDir/build"
}

task buildImporterExporter(type: GradleBuild, group: build) {
    def impExpProject = project(':impexp')
    tasks = ['installDist']
    buildFile = "$impExpProject.projectDir/impexp-client/build.gradle"
    outputs.dir "$impExpProject.projectDir/impexp-client/build/install/3DCityDB-Importer-Exporter"
}

task buildWebFeatureService(type: GradleBuild, group: build) {
    def wfsProject = project(':wfs')
    tasks = ['installDist']
    buildFile = "$wfsProject.projectDir/build.gradle"
    outputs.dir "$wfsProject.projectDir/build/install/3DCityDB-Web-Feature-Service"
}

task buildIurADEExtension(type: GradleBuild, group: build) {
    def iURADEProject = project(':iur-ade')
    tasks = ['installDist']
    buildFile = "$iURADEProject.projectDir/build.gradle"
    outputs.dir "$iURADEProject.projectDir/build/install"
}

task buildEnergyADEExtension(type: GradleBuild, group: build) {
    def energyADEProject = project(':energy-ade')
    tasks = ['installDist']
    buildFile = "$energyADEProject.projectDir/build.gradle"
    outputs.dir "$energyADEProject.projectDir/build/install"
}

task buildADEManagerPlugin(type: GradleBuild, group: build) {
    def adePluginProject = project(':ade-plugin')
    tasks = ['installDist']
    buildFile = "$adePluginProject.projectDir/build.gradle"
    outputs.dir "$adePluginProject.projectDir/build/install"
}

task buildSpreadsheetGeneratorPlugin(type: GradleBuild, group: build) {
    def spshgPluginProject = project(':spshg-plugin')
    tasks = ['installDist']
    buildFile = "$spshgPluginProject.projectDir/build.gradle"
    outputs.dir "$spshgPluginProject.projectDir/build/install"
}

jar.onlyIf {false}
startScripts.onlyIf {false}

distributions.main {
    contents {
        into('3dcitydb') {
            from build3DCityDB.outputs
        }
        into('3dcitydb-docs') {
            from build3DCityDBDocs.outputs
        }
        into('3dcitydb-web-map') {
            from "$rootDir/3dcitydb-web-map"
        }
        into('importer-exporter') {
            from buildImporterExporter.outputs
        }
        into('importer-exporter-plugins') {
            from buildADEManagerPlugin.outputs
            from buildSpreadsheetGeneratorPlugin.outputs
        }
        into('ade-extensions') {
            from buildIurADEExtension.outputs
            from buildEnergyADEExtension.outputs
        }
        into('web-feature-service') {
            from buildWebFeatureService.outputs
        }
    }
}

task createImpExpInstallerContents(dependsOn: buildImporterExporter, type: Copy) {
    into ("$buildDir/tmp/impexp")
    from buildImporterExporter.outputs

    into('3dcitydb') {
        from build3DCityDB.outputs
    }

    into('3d-web-map-client') {
        from "$rootDir/3dcitydb-web-map"
    }

    from(file("$buildDir/tmp/dir")) {
        mkdir "$buildDir/tmp/dir/ade-extensions"
    }

    into ("plugins") {
        from tasks.getByPath('buildADEManagerPlugin').outputs
        from tasks.getByPath('buildSpreadsheetGeneratorPlugin').outputs
    }

    into('manual/3DCityDB_Documentation') {
        from build3DCityDBDocs.outputs
    }
}

task buildImpExpInstaller(dependsOn: createImpExpInstallerContents, group: 'distribution') {
    def impExpProject = project(':impexp')
    impExpProject.apply from: "$impExpProject.projectDir/properties.gradle"

    def installDir = "$buildDir/tmp/impexp".toString()
    def distDir = distZip.destinationDirectory.get()
    def izpackDir = "$buildDir/tmp/izpack".toString()
    def installer = "$distDir/$impExpProject.appName-" + project.version + '-Setup.jar'

    println impExpProject.version

    doLast {
        mkdir distDir

        copy {
            from 'resources/izpack'
            into izpackDir
            filesMatching('**/*.xml') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        appName: impExpProject.impexpName,
                        appVersion: impExpProject.version,
                        appSubPath: '3DCityDB-Importer-Exporter',
                        appShortcut: impExpProject.appShortcutName,
                        startScriptName: impExpProject.appName,
                        cliName: impExpProject.appCliName,
                        url: impExpProject.citydbWebsiteUrl,
                        citydbName: impExpProject.citydbName,
                        citydbVersion: impExpProject.citydbVersion,
                        installDir: installDir,
                        cliDir: application.executableDir,
                        pluginsDir: 'plugins',
                        contribsDir: 'contribs',
                        citydbDir: '3dcitydb',
                        adeExtensionsDir: 'ade-extensions',
                        templatesDir: 'templates',
                        manualDir: 'manual',
                        webMapClientDir: '3d-web-map-client',
                        samplesDir: 'samples',
                        spreadSheetPluginDir: 'plugin-spreadsheet-generator',
                        adeManagerPluginDir: 'plugin-ade-manager'
                ])
            }
            filesMatching('**/license.txt') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        license: file("$installDir/license/LICENSE.txt").text,
                        apache: file("$rootDir/resources/license/APACHE-2.0.txt").text
                ])
            }
        }

        ant.taskdef(name: 'izpack', classname: 'com.izforge.izpack.ant.IzPackTask', classpath: configurations.izpack.asPath)
        ant.izpack(input: "$izpackDir/install.xml",
                output: installer,
                basedir: izpackDir
        )
    }
}
