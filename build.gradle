import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'distribution'
}

configurations {
    izpack
}

dependencies {
    izpack fileTree(dir: 'resources/izpack/lib', include: '*.jar')
}

apply from: 'properties.gradle'

version '2024.0.2'

// 3dcitydb project
task update3DCityDBGitSubmodule(type: Exec) {
    commandLine 'git', 'submodule', 'update', '--init', '--remote', '3dcitydb'
}

task build3DCityDB(type: GradleBuild, group: 'build', dependsOn: update3DCityDBGitSubmodule) {
    def cityDBProject = project(':citydb')
    tasks = ['clean', 'installDist']
    dir "$cityDBProject.projectDir"
    outputs.dir "$cityDBProject.projectDir/build/install/3dcitydb"
}

// importer-exporter project
task updateImporterExporterGitSubmodule(type: Exec) {
    commandLine 'git', 'submodule', 'update', '--init', '--remote', 'importer-exporter'
}

task buildImporterExporter(type: GradleBuild, group: 'build', dependsOn: updateImporterExporterGitSubmodule) {
    def impExpProject = project(':impexp')
    tasks = ['clean', 'installDist']
    dir "$impExpProject.projectDir"
    outputs.dir "$impExpProject.projectDir/impexp-client-gui/build/install/3DCityDB-Importer-Exporter"
    outputs.upToDateWhen { false }
}

// plugin-ade-manager project
task updateADEManagerPluginGitSubmodule(type: Exec) {
    commandLine 'git', 'submodule', 'update', '--init', '--remote', 'importer-exporter-plugins/plugin-ade-manager'
}

task buildADEManagerPlugin(type: GradleBuild, group: 'build', dependsOn: updateADEManagerPluginGitSubmodule) {
    def adePluginProject = project(':ade-plugin')
    tasks = ['clean', 'installDist']
    dir "$adePluginProject.projectDir"
    outputs.dir "$adePluginProject.projectDir/build/install"
    outputs.upToDateWhen { false }
}

// build plugin-spreadsheet-generator submodule
task updateSpreadsheetGeneratorPluginGitSubmodule(type: Exec) {
    commandLine 'git', 'submodule', 'update', '--init', '--remote', 'importer-exporter-plugins/plugin-spreadsheet-generator'
}

task buildSpreadsheetGeneratorPlugin(type: GradleBuild, group: 'build', dependsOn: updateSpreadsheetGeneratorPluginGitSubmodule) {
    def spshgPluginProject = project(':spshg-plugin')
    tasks = ['clean', 'installDist']
    dir "$spshgPluginProject.projectDir"
    outputs.dir "$spshgPluginProject.projectDir/build/install"
    outputs.upToDateWhen { false }
}

// build 3dcitydb-web-map submodule
task updateWebMapGitSubmodule(type: Exec) {
    commandLine 'git', 'submodule', 'update', '--init', '--remote', '3dcitydb-web-map'
}

task buildWebMap(type: Zip, group: 'build', dependsOn: updateWebMapGitSubmodule) {
    from "$rootDir/3dcitydb-web-map"
    archiveFileName = '3dcitydb-web-map.zip'
    destinationDirectory = file("$projectDir/build/tmp/3dcitydb-web-map")
}

task createImpExpInstallerContents(dependsOn: buildImporterExporter, type: Copy) {
    into ("$projectDir/build/tmp/impexp")
    from buildImporterExporter.outputs

    into('3dcitydb') {
        from build3DCityDB.outputs
    }

    into('3d-web-map-client') {
        from buildWebMap.outputs
    }

    into ("plugins") {
        from tasks.getByPath('buildADEManagerPlugin').outputs
        from tasks.getByPath('buildSpreadsheetGeneratorPlugin').outputs
    }

    from(file("$projectDir/build/tmp/dir")) {
        mkdir "$projectDir/build/tmp/dir/ade-extensions"
    }
}

task buildImpExpInstaller(dependsOn: createImpExpInstallerContents, group: 'distribution') {
    doLast {
        def impExpProject = project(':impexp')

        impExpProject.apply from: "$impExpProject.projectDir/properties.gradle"

        def installDir = "$projectDir/build/tmp/impexp".toString()
        def distDir = distZip.destinationDirectory.get()
        def izpackDir = "$projectDir/build/tmp/izpack".toString()
        def installer = "$distDir/$impExpProject.appName-" + impExpProject.version + '-Setup.jar'

        mkdir distDir

        copy {
            from 'resources/izpack'
            into izpackDir
            filesMatching('**/*.xml') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        appName: impExpProject.impexpName,
                        appVersion: impExpProject.version,
                        appSubPath: '3DCityDB-Importer-Exporter',
                        appShortcut: impExpProject.appShortcutName,
                        startScriptName: impExpProject.appName,
                        cliName: impExpProject.appCliName,
                        url: impExpProject.citydbWebsiteUrl,
                        citydbName: impExpProject.citydbName,
                        citydbVersion: impExpProject.citydbVersion,
                        installDir: installDir,
                        cliDir: 'bin',
                        pluginsDir: 'plugins',
                        contribsDir: 'contribs',
                        citydbDir: '3dcitydb',
                        adeExtensionsDir: 'ade-extensions',
                        templatesDir: 'templates',
                        manualDir: 'manual',
                        webMapClientDir: '3d-web-map-client',
                        samplesDir: 'samples',
                        spreadSheetPluginDir: 'plugin-spreadsheet-generator',
                        adeManagerPluginDir: 'plugin-ade-manager'
                ])
            }
            filesMatching('**/license.txt') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        license: file("$installDir/license/LICENSE.txt").text,
                        apache: file("$rootDir/resources/license/APACHE-2.0.txt").text
                ])
            }
        }

        ant.taskdef(name: 'izpack', classname: 'com.izforge.izpack.ant.IzPackTask', classpath: configurations.izpack.asPath)
        ant.izpack(input: "$izpackDir/install.xml",
                output: installer,
                basedir: izpackDir
        )
    }
}
