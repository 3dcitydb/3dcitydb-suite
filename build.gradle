import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'application'
    id 'distribution'
}

configurations {
    izpack
}

dependencies {
    izpack fileTree(dir: 'resources/izpack/lib', include: '*.jar')
}

version '4.3.0'

task build3DCityDB(group: build, dependsOn: ":3dcitydb:installDist") {
    outputs.dir file(project(':3dcitydb').getBuildDir().toString() + '/install/3dcitydb')
}

task build3DCityDBDocs(group: build, dependsOn: ":3dcitydb-docs:build") {
    outputs.dir project(':3dcitydb-docs').getBuildDir()
}

task buildImporterExporter(group: build, type: GradleBuild) {
    def impExpProject = project(':importer-exporter')
    tasks = ['installDist']
    buildFile = "$impExpProject.projectDir/impexp-client/build.gradle"
    outputs.dir "$impExpProject.projectDir/impexp-client/install/3DCityDB-Importer-Exporter"
}

task buildWebFeatureService(group: build, dependsOn: ":web-feature-service:installDist") {
    outputs.dir file(project(':web-feature-service').getBuildDir().toString() + '/install/3DCityDB-Web-Feature-Service')
}

task buildIurADEExtension(group: build, dependsOn: ":iur-ade-citydb:installDist") {
    outputs.dir file(project(':iur-ade-citydb').getBuildDir().toString() + '/install')
}

task buildEnergyADEExtension(group: build, dependsOn: ":energy-ade-citydb:installDist") {
    outputs.dir file(project(':energy-ade-citydb').getBuildDir().toString() + '/install2')
}

task buildADEManagerPlugin(group: build, dependsOn: ":plugin-ade-manager:installDist") {
    outputs.dir file(project(':plugin-ade-manager').getBuildDir().toString() + '/install')
}

task buildSpreadsheetGeneratorPlugin(group: build, dependsOn: ":plugin-spreadsheet-generator:installDist") {
    outputs.dir file(project(':plugin-spreadsheet-generator').getBuildDir().toString() + '/install')
}

jar.onlyIf {false}
startScripts.onlyIf {false}

distributions.main {
    contents {
        into('3dcitydb') {
            from build3DCityDB.outputs
        }
        into('3dcitydb-docs') {
            from build3DCityDBDocs.outputs
        }
        into('3dcitydb-web-map') {
            from "$rootDir/3dcitydb-web-map"
        }
        into('importer-exporter') {
            from buildImporterExporter.outputs
        }
        into('importer-exporter-plugins') {
            from buildADEManagerPlugin.outputs
            from buildSpreadsheetGeneratorPlugin.outputs
        }
        into('ade-extensions') {
            from buildIurADEExtension.outputs
            from buildEnergyADEExtension.outputs
        }
        into('web-feature-service') {
            from buildWebFeatureService.outputs
        }
    }
}

task createImpExpInstallerContents(dependsOn: buildImporterExporter, type: Copy) {
    into ("$buildDir/tmp/impexp")
    from buildImporterExporter.outputs

    into('3dcitydb') {
        from build3DCityDB.outputs
    }

    into('3d-web-map-client') {
        from "$rootDir/3dcitydb-web-map"
    }

    from(file("$buildDir/tmp/dir")) {
        mkdir "$buildDir/tmp/dir/ade-extensions"
    }

    into ("plugins") {
        from tasks.getByPath('buildADEManagerPlugin').outputs
        from tasks.getByPath('buildSpreadsheetGeneratorPlugin').outputs
    }

    into('manual/3DCityDB_Documentation') {
        from build3DCityDBDocs.outputs
    }
}

task buildImpExpInstaller(dependsOn: createImpExpInstallerContents, group: 'distribution') {
    def impExpProject = project(':importer-exporter')
    impExpProject.apply from: "$impExpProject.projectDir/properties.gradle"

    def installDir = "$buildDir/tmp/impexp".toString()
    def distDir = distZip.destinationDirectory.get()
    def izpackDir = "$buildDir/tmp/izpack".toString()
    def installer = "$distDir/$impExpProject.appName-" + impExpProject.version + '-Setup.jar'

    doLast {
        mkdir distDir

        copy {
            from 'resources/izpack'
            into izpackDir
            filesMatching('**/*.xml') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        appName: impExpProject.impexpName,
                        appVersion: impExpProject.version,
                        appSubPath: '3DCityDB-Importer-Exporter',
                        appShortcut: impExpProject.appShortcutName,
                        startScriptName: impExpProject.appName,
                        cliName: impExpProject.appCliName,
                        url: impExpProject.citydbWebsiteUrl,
                        citydbName: impExpProject.citydbName,
                        citydbVersion: impExpProject.citydbVersion,
                        installDir: installDir,
                        cliDir: application.executableDir,
                        pluginsDir: 'plugins',
                        contribsDir: 'contribs',
                        citydbDir: '3dcitydb',
                        adeExtensionsDir: 'ade-extensions',
                        templatesDir: 'templates',
                        manualDir: 'manual',
                        webMapClientDir: '3d-web-map-client',
                        samplesDir: 'samples',
                        spreadSheetPluginDir: 'plugin-spreadsheet-generator',
                        adeManagerPluginDir: 'plugin-ade-manager'
                ])
            }
            filesMatching('**/license.txt') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        license: file("$installDir/license/LICENSE.txt").text,
                        apache: file("$rootDir/resources/license/APACHE-2.0.txt").text
                ])
            }
        }

        ant.taskdef(name: 'izpack', classname: 'com.izforge.izpack.ant.IzPackTask', classpath: configurations.izpack.asPath)
        ant.izpack(input: "$izpackDir/install.xml",
                output: installer,
                basedir: izpackDir
        )
    }
}
